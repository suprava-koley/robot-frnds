{"version":3,"sources":["Components/Search.js","Components/Card.js","Components/CardList.js","Components/robot.js","Components/Scroll.js","Container/App.js","Container/serviceWorker.js","index.js"],"names":["Search","searchChange","className","type","placeholder","onChange","Card","props","name","email","id","alt","src","CardList","robot","map","user","i","key","username","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filterrobo","this","filter","el","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAaeA,EAVA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACb,OACI,6BACI,2BAAOC,UAAU,uCACjBC,KAAK,SACJC,YAAY,SACZC,SAAUJ,MCMRK,EAZJ,SAACC,GAAU,IACXC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACI,yBAAKR,UAAU,gDACX,yBAAKS,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,YACrB,6BACI,4BAAKF,GACL,2BAAIC,MCWLI,EAjBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,MAEf,OACM,6BAEWA,EAAMC,KAAI,SAACC,EAAKC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACjBP,GAAII,EAAMG,GAAGP,GACbF,KAAMM,EAAMG,GAAGT,KACfC,MAAOK,EAAMG,GAAGR,aCqC1BK,EAlDH,CACR,CACIJ,GAAG,EACHF,KAAK,gBACLW,SAAS,SACTV,MAAO,qBAEX,CACIC,GAAG,EACHF,KAAM,eACNW,SAAS,KACTV,MAAO,qBAEX,CACIC,GAAG,EACHF,KAAM,mBACNW,SAAS,OACTV,MAAO,sBAEX,CACIC,GAAG,EACHF,KAAM,mBACNW,SAAS,OACTV,MAAO,6BAEX,CACIC,GAAG,EACHF,KAAM,mBACNW,SAAS,OACTV,MAAO,4BAEX,CACIC,GAAG,EACHF,KAAM,uBACNW,SAAS,OACTV,MAAO,2BAEX,CACIC,GAAG,EACHF,KAAM,kBACNW,SAAS,OACTV,MAAO,0BAEX,CACIC,GAAG,EACHF,KAAM,2BACNW,SAAS,OACTV,MAAO,yBCpCAW,G,MATD,SAACb,GACX,OAEE,yBAAKc,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAmBC,OAAO,UACxDjB,EAAMkB,YCwCLC,E,YApCd,aAAc,IAAD,8BACX,+CAaFC,eAAgB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAbzC,EAAKC,MAAM,CACVnB,MAAMA,EACNgB,YAAY,IAJF,E,iFAQO,IAAD,OACjBI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACf,MAAOwB,S,+BAM9B,IAAD,OACAC,EAAaC,KAAKP,MAAMnB,MAAM2B,QAAO,SAAAC,GACzC,OAAOA,EAAGlC,KAAKmC,oBAAoBC,SAAS,EAAKX,MAAMH,YAAYa,wBAE7D,OACM,yBAAKzC,UAAU,MAEb,qCACA,kBAAC,EAAD,CAAQD,aAAcuC,KAAKb,iBAC3B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUb,MAAOyB,U,GA5BnBM,a,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.6b3e87ae.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Search = ({searchChange}) =>{\r\n    return(\r\n        <div>\r\n            <input className=\"pa3 br3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n             placeholder=\"search\"\r\n             onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\nexport default Search;\r\n","import React from 'react';\r\n\r\n\r\nconst Card=(props) =>{\r\n    const {name,email,id} = props;\r\n    return(\r\n        <div className='bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?50*50`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robot}) =>{\r\n \r\n    return(\r\n          <div>\r\n                 {\r\n                     robot.map((user,i)=>{ \r\n                        return <Card key={i}\r\n                         id={robot[i].id} \r\n                         name={robot[i].name} \r\n                         email={robot[i].email}/>\r\n                     }) \r\n                 }\r\n          </div>\r\n       \r\n    );\r\n   \r\n}\r\nexport default CardList;\r\n                   ","const robot=[\r\n    {\r\n        id:1,\r\n        name:'Leanne Graham',\r\n        username:'leanne',\r\n        email: \"Sincere@april.biz\"\r\n    },\r\n    {\r\n        id:2,\r\n        name: \"Ervin Howell\",\r\n        username:'ri',\r\n        email: \"Shanna@melissa.tv\"\r\n    },\r\n    {\r\n        id:3,\r\n        name: \"Clementine Bauch\",\r\n        username:'tanu',\r\n        email: \"Nathan@yesenia.net\"\r\n    },\r\n    {\r\n        id:4,\r\n        name: \"Patricia Lebsack\",\r\n        username:'tanu',\r\n        email: \"Julianne.OConner@kory.org\"\r\n    },\r\n    {\r\n        id:5,\r\n        name: \"Chelsey Dietrich\",\r\n        username:'tanu',\r\n        email: \"Lucio_Hettinger@annie.ca\"\r\n    },\r\n    {\r\n        id:6,\r\n        name: \"Mrs. Dennis Schulist\",\r\n        username:'tanu',\r\n        email: \"Karley_Dach@jasper.info\",\r\n    },\r\n    {\r\n        id:7,\r\n        name: \"Kurtis Weissnat\",\r\n        username:'tanu',\r\n        email: \"Telly.Hoeger@billy.biz\"\r\n    },\r\n    {\r\n        id:8,\r\n        name: \"Nicholas Runolfsdottir V\",\r\n        username:'tanu',\r\n        email: \"Sherwood@rosamond.me\"\r\n    }\r\n]\r\nexport default robot;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return(\r\n  \r\n      <div style={{overflow:'scroll',border:'5px solid black', height:'600px'}}>\r\n             {props.children}\r\n      </div>\r\n    \r\n    );\r\n}\r\nexport default Scroll;","import React from 'react';\r\nimport  {Component} from 'react';\r\nimport Search from '../Components/Search';\r\nimport CardList from '../Components/CardList';\r\nimport robot from '../Components/robot';\r\nimport './App.css'\r\nimport Scroll from '../Components/Scroll';\r\n\r\n\r\nclass App extends Component  {\r\n constructor(){\r\n   super()\r\n   this.state={\r\n    robot:robot,\r\n    searchfield:''\r\n  }\r\n }\r\n\r\n componentDidMount(){\r\n   fetch('http://jsonplaceholder.typicode.com/users')\r\n   .then(response=> response.json())\r\n   .then(users => {this.setState({robot :users})});\r\n }\r\n\r\n onSearchChange =(event)=>{\r\n    this.setState({searchfield:event.target.value})\r\n  }\r\n  render(){\r\n    const filterrobo = this.state.robot.filter(el=>{\r\n      return el.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase())});\r\n    \r\n            return (\r\n                  <div className='tc'>\r\n                   \r\n                    <h1>Robot</h1>\r\n                    <Search searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                    <CardList robot={filterrobo}/>\r\n                    </Scroll>\r\n                  </div>\r\n            );  \r\n }\r\n \r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Container/index.css';\r\nimport App from './Container/App';\r\n\r\nimport 'tachyons';\r\nimport * as serviceWorker from './Container/serviceWorker';\r\n// import robot from './robot';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}