{"version":3,"sources":["Componenets/Search.js","Componenets/Card.js","Componenets/CardList.js","Componenets/robot.js","Componenets/Scroll.js","Container/App.js","Container/serviceWorker.js","index.js"],"names":["Search","searchChange","className","type","placeholder","onChange","Card","props","name","email","id","alt","src","CardList","robot","map","user","i","key","username","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filterrobo","this","filter","el","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAaeA,EAVA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACb,OACI,6BACI,2BAAOC,UAAU,uCACjBC,KAAK,SACJC,YAAY,SACZC,SAAUJ,MCMRK,EAZJ,SAACC,GAAU,IACXC,EAAiBD,EAAjBC,KAAKC,EAAYF,EAAZE,MAAMC,EAAMH,EAANG,GAClB,OACI,yBAAKR,UAAU,gDACX,yBAAKS,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,YACrB,6BACI,4BAAKF,GACL,2BAAIC,EAAJ,QCWDI,EAjBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,MAEf,OACM,6BAEWA,EAAMC,KAAI,SAACC,EAAKC,GACb,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACjBP,GAAII,EAAMG,GAAGP,GACbF,KAAMM,EAAMG,GAAGT,KACfC,MAAOK,EAAMG,GAAGR,aCqC1BK,EAlDH,CACR,CACIJ,GAAG,EACHF,KAAK,gBACLW,SAAS,OACTV,MAAM,cAEV,CACIC,GAAG,EACHF,KAAK,KACLW,SAAS,KACTV,MAAM,YAEV,CACIC,GAAG,EACHF,KAAK,QACLW,SAAS,OACTV,MAAM,cAEV,CACIC,GAAG,EACHF,KAAK,SACLW,SAAS,OACTV,MAAM,cAEV,CACIC,GAAG,EACHF,KAAK,MACLW,SAAS,OACTV,MAAM,cAEV,CACIC,GAAG,EACHF,KAAK,MACLW,SAAS,OACTV,MAAM,cAEV,CACIC,GAAG,EACHF,KAAK,QACLW,SAAS,OACTV,MAAM,cAEV,CACIC,GAAG,EACHF,KAAK,OACLW,SAAS,OACTV,MAAM,eCpCCW,G,MATD,SAACb,GACX,OAEE,yBAAKc,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAmBC,OAAO,UACxDjB,EAAMkB,YCwCLC,E,YApCd,aAAc,IAAD,8BACX,+CAaFC,eAAgB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SAbzC,EAAKC,MAAM,CACVnB,MAAMA,EACNgB,YAAY,IAJF,E,iFAQO,IAAD,OACjBI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACf,MAAOwB,S,+BAM9B,IAAD,OACAC,EAAaC,KAAKP,MAAMnB,MAAM2B,QAAO,SAAAC,GACzC,OAAOA,EAAGlC,KAAKmC,oBAAoBC,SAAS,EAAKX,MAAMH,YAAYa,wBAE7D,OACM,yBAAKzC,UAAU,MAEb,qCACA,kBAAC,EAAD,CAAQD,aAAcuC,KAAKb,iBAC3B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUb,MAAOyB,U,GA5BnBM,a,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.3ace7896.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Search = ({searchChange}) =>{\r\n    return(\r\n        <div>\r\n            <input className=\"pa3 br3 ba b--green bg-lightest-blue\"\r\n            type=\"search\"\r\n             placeholder=\"search\"\r\n             onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\nexport default Search;\r\n","import React from 'react';\r\n\r\n\r\nconst Card=(props) =>{\r\n    const {name,email,id} = props;\r\n    return(\r\n        <div className='bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?50*50`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robot}) =>{\r\n \r\n    return(\r\n          <div>\r\n                 {\r\n                     robot.map((user,i)=>{ \r\n                        return <Card key={i}\r\n                         id={robot[i].id} \r\n                         name={robot[i].name} \r\n                         email={robot[i].email}/>\r\n                     }) \r\n                 }\r\n          </div>\r\n       \r\n    );\r\n   \r\n}\r\nexport default CardList;\r\n                   ","const robot=[\r\n    {\r\n        id:1,\r\n        name:'suprava koley',\r\n        username:'tanu',\r\n        email:'su@dfh.com'\r\n    },\r\n    {\r\n        id:2,\r\n        name:'ri',\r\n        username:'ri',\r\n        email:'ri@r.com'\r\n    },\r\n    {\r\n        id:3,\r\n        name:'rihan',\r\n        username:'tanu',\r\n        email:'su@dfh.com'\r\n    },\r\n    {\r\n        id:4,\r\n        name:'chandu',\r\n        username:'tanu',\r\n        email:'su@dfh.com'\r\n    },\r\n    {\r\n        id:5,\r\n        name:'sam',\r\n        username:'tanu',\r\n        email:'su@dfh.com'\r\n    },\r\n    {\r\n        id:6,\r\n        name:'xyz',\r\n        username:'tanu',\r\n        email:'su@dfh.com'\r\n    },\r\n    {\r\n        id:7,\r\n        name:'ghffh',\r\n        username:'tanu',\r\n        email:'su@dfh.com'\r\n    },\r\n    {\r\n        id:8,\r\n        name:'yyyy',\r\n        username:'tanu',\r\n        email:'su@dfh.com'\r\n    }\r\n]\r\nexport default robot;","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return(\r\n  \r\n      <div style={{overflow:'scroll',border:'5px solid black', height:'600px'}}>\r\n             {props.children}\r\n      </div>\r\n    \r\n    );\r\n}\r\nexport default Scroll;","import React from 'react';\nimport  {Component} from 'react';\nimport Search from '../Componenets/Search';\nimport CardList from '../Componenets/CardList';\n import robot from '../Componenets/robot';\nimport './App.css'\nimport Scroll from '../Componenets/Scroll';\n\n\nclass App extends Component  {\n constructor(){\n   super()\n   this.state={\n    robot:robot,\n    searchfield:''\n  }\n }\n\n componentDidMount(){\n   fetch('http://jsonplaceholder.typicode.com/users')\n   .then(response=> response.json())\n   .then(users => {this.setState({robot :users})});\n }\n\n onSearchChange =(event)=>{\n    this.setState({searchfield:event.target.value})\n  }\n  render(){\n    const filterrobo = this.state.robot.filter(el=>{\n      return el.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase())});\n    \n            return (\n                  <div className='tc'>\n                   \n                    <h1>Robot</h1>\n                    <Search searchChange={this.onSearchChange}/>\n                    <Scroll>\n                    <CardList robot={filterrobo}/>\n                    </Scroll>\n                  </div>\n            );  \n }\n \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Container/index.css';\nimport App from './Container/App';\n\nimport 'tachyons';\nimport * as serviceWorker from './Container/serviceWorker';\n// import robot from './robot';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}